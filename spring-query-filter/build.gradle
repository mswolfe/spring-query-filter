group 'com.github.mswolfe'
version '4.2.1'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    springVersion = '4.2.3.RELEASE'
}

dependencies {
    compile "org.springframework:spring-framework-bom:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework.boot:spring-boot-autoconfigure:1.4.0.RELEASE"

    compile 'commons-beanutils:commons-beanutils-core:1.8.3'
    compile 'javax.validation:validation-api:1.1.0.Final'

    testCompile 'org.codehaus.groovy:groovy-all:2.4.1'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testRuntime 'cglib:cglib-nodep:3.1'
    testRuntime 'org.objenesis:objenesis:2.1'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : '',
                        password: project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : '')
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : '',
                        password: project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : '')
            }

            pom.project {
                name 'Spring Query Filter'
                packaging 'jar'
                description "A library that provides parsing for the 'filter' query parameter"
                url 'https://github.com/mswolfe/spring-query-filter'

                issueManagement {
                    url 'https://github.com/mswolfe/spring-query-filter/issues'
                    system 'GitHub Issues'
                }

                scm {
                    connection 'scm:git:git://github.com/mswolfe/spring-query-filter.git'
                    developerConnection 'scm:git:git@github.com:mswolfe/spring-query-filter.git'
                    url 'https://github.com/mswolfe/spring-query-filter'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/mswolfe/spring-query-filter/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'mswolfe'
                        name 'Michael Wolfe'
                        email 'mwooolfe@gmail.com'
                    }
                }
            }
        }
    }
}
